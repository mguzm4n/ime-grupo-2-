source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
1 - p
0.001*100
p*100
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
g1
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ch. 6/poder_graficos.R")
t
g
source("G:/Mi unidad/1. Nivel 6-7/IME/ch. 6/poder_graficos.R")
g
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
g1
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
g1
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
beta
?pnorm
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
beta
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
beta
beta*1000
beta*100
?power.t.test
source("G:/Mi unidad/1. Nivel 6-7/IME/ep-05.R")
source("~/.active-rstudio-document", encoding = 'UTF-8')
g7
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
pchisq(2.89, 1)
pchisq(2.89, 1)
?pqchisq
pqchisq
?pchisq
pchisq(2.89, 1, lower.tail = FALSE)
pchisq(7.78, 2, lower.tail = FALSE)
instanciaA <- c(129, 109, 28, 178, 74, 16, 87, 108, 149, 78)
instanciaA <- c(129, 109, 28, 178, 74, 16, 87, 108, 149, 78)
tiempoA <- c(1510394, 402929, 885722, 4428151,48667,834565, 70599, 783108,210041, 37449)      )
tiempoA <- c(1510394, 402929, 885722, 4428151,48667,834565, 70599, 783108,210041, 37449)
algoritmoA <- data.frame(instanciaA, tiempoA)
View(algoritmoA)
View(algoritmoA)
instanciaB <- c(134, 193, 10, 88, 142, 86, 36, 190, 163, 33)
algoritmoB <- data.frame(instanciaB, tiempoB)
tiempoB <- c(1252837, 2196277, 120276, 4629726, 5743260, 6701654, 6568968, 180141, 6684497, 35974)
algoritmoB <- data.frame(instanciaB, tiempoB)
View(algoritmoB)
algoritmos <- data.frame(algoritmoA, algoritmoB)
View(algoritmos)
View(algoritmos)
library(ggpubr)
g <- gghistogram(algoritmoA)
g
print(g)
g <- gghistogram(algoritmoA, x = "tiempoA")
print(g)
logAlgoritmoA <- log(algoritmoA)
View(logAlgoritmoA)
View(logAlgoritmoA)
g2 <- gghistogram(logAlgoritmoA, x = "tiempoA")
print(g2)
g <- gghistogram(algoritmoA, x = "instanciaA")
print(g)
logAlgoritmoA <- log(algoritmoA)
g2 <- gghistogram(logAlgoritmoA, x = "tiempoA")
print(g2)
logAlgoritmoA <- log(algoritmoA)
g2 <- gghistogram(logAlgoritmoA, x = "instanciaA")
print(g2)
g2 <- gghistogram(logAlgoritmoA, x = "instanciaA")
library(rcompanion)
datosTukey <- transformTukey
datosTukey <- transformTukey(algoritmoA, start = -1, end = 1, int = 0.1, plotit = TRUE, returnLambda = TRUE) )
datosTukey <- transformTukey(algoritmoA, start = -1, end = 1, int = 0.1, plotit = TRUE, returnLambda = TRUE)
instanciaA <- c(129, 109, 28, 178, 74, 16, 87, 108, 149, 78)
tiempoA <- c(1510394, 402929, 885722, 4428151,48667,834565, 70599, 783108,210041, 37449)
algoritmoA <- data.frame(instanciaA, tiempoA)
instanciaB <- c(134, 193, 10, 88, 142, 86, 36, 190, 163, 33)
tiempoB <- c(1252837, 2196277, 120276, 4629726, 5743260, 6701654, 6568968, 180141, 6684497, 35974)
algoritmoB <- data.frame(instanciaB, tiempoB)
algoritmos <- data.frame(algoritmoA, algoritmoB)
g <- gghistogram(algoritmoA, x = "instanciaA")
print(g)
datosTukey <- transformTukey(algoritmoA, start = -1, end = 1, int = 0.1, plotit = TRUE, returnLambda = TRUE)
datosTukey <- transformTukey(algoritmoA$tiempoA, start = -1, end = 1, int = 0.1, plotit = TRUE, returnLambda = TRUE)
print(datosTukey$lambda)
g2 <- gghistogram(datosTukey, x = "tiempoA")
datosTukey
datosTukey <- transformTukey(algoritmoA$tiempoA, start = -1, end = 1,
int = 0.1, plotit = TRUE,
returnLambda = FALSE)
datosTukey
source("~/.active-rstudio-document", echo=TRUE)
lambda_B
datosTukeyB
transfB
source("~/.active-rstudio-document", echo=TRUE)
transfA
algoritmos <- data.frame(tiempoA, tiempoB)
View(algoritmos)
source("~/.active-rstudio-document", echo=TRUE)
prueba
transfA
transfA[1]
transfA[2]
transfA[3]
source("~/.active-rstudio-document", echo=TRUE)
transfA
transfA[1]
transfA[2]
prueba
alfa <- 0.05
prueba <- t.test(x = datosTukeyA,
y = datosTukeyB,
paired = FALSE,
alternative = "greater",
mu = 0,
conf.level = 1 - alfa)
datosTukeyA
datosTukeyA[1]
source("~/.active-rstudio-document", echo=TRUE)
prueba <- t.test(x = as.numeric(datosTukeyA),
y = as.numeric(datosTukeyB),
paired = FALSE,
alternative = "greater",
mu = 0,
conf.level = 1 - alfa)
[]
prueba <- t.test(x = is.numeric(datosTukeyA),
y = is.numeric(datosTukeyB),
paired = FALSE,
alternative = "greater",
mu = 0,
conf.level = 1 - alfa)
View(datosTukeyA)
View(datosTukeyA)
prueba <- t.test(x = as.numeric(datosTukeyA[1]),
y = as.numeric(datosTukeyB[1]),
paired = FALSE,
alternative = "greater",
mu = 0,
conf.level = 1 - alfa)
prueba <- t.test(x = datosTukeyA[1],
y = datosTukeyB[1],
paired = FALSE,
alternative = "greater",
mu = 0,
conf.level = 1 - alfa)
prueba <- t.test(x = datosTukeyA[[1]],
y = datosTukeyB[[1]],
paired = FALSE,
alternative = "greater",
mu = 0,
conf.level = 1 - alfa)
print(prueba$p.value)
mtcars
rls <- lm(formula = mpg ~ wt, data = datos)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
rls
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
a
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
predicciones
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
residuos
rls$coefficients
print(r)
predicciones
?predict
?lm
mtcars$am
mtcars$vs
# Ajustar modelo con el conjunto de entrenamiento
modelo <- lm(mpg ~ wt, data = entrenamiento)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
getwd()
source("G:/Mi unidad/1. Nivel 6-7/IME/scripts-por-caps-2/ch. 14/validacion.R", echo=TRUE)
install.packages('caret')
source("G:/Mi unidad/1. Nivel 6-7/IME/scripts-por-caps-2/ch. 14/validacion.R", echo=TRUE)
source("G:/Mi unidad/1. Nivel 6-7/IME/scripts-por-caps-2/ch. 14/validacion.R", echo=TRUE)
source("G:/Mi unidad/1. Nivel 6-7/IME/scripts-por-caps-2/ch. 14/validacion.R", echo=TRUE)
source("G:/Mi unidad/1. Nivel 6-7/IME/scripts-por-caps-2/ch. 14/validacion.R", echo=TRUE)
source("G:/Mi unidad/1. Nivel 6-7/IME/scripts-por-caps-2/ch. 14/validacion.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
b_1
b0
modelo$coefficients
modelo$coefficients[0]
modelo$coefficients[1]
source("~/.active-rstudio-document", echo=TRUE)
correlation
corr()
correl()
cor()
cor(datos)
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
setwd("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-")
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
setwd("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13")
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
muestra_hombres
nulo <- lm(Weight ~ 1, data = muestra_hombres)
nulo
list(upper = completo)
completo <- lm(Weight ~ ., data = muestra_hombres)
list(upper = completo)
list(upper = completo)
l <- list(upper = completo)
l
View(completo)
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
datos_seleccionados
datos_seleccionados[['Weight']] <- muestra_hombres[["Weight"]]
datos_seleccionados
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
datos_seleccionados
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
step(nulo, scope = list(upper = completo), direction = "forward", trace = 0)
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
step(nulo, scope = list(upper = completo), direction = "forward", trace = 1)
completo
step(nulo, scope = list(upper = completo), direction = "forward", trace = 1)
# Al ver la traza de la función step, notamos que agregando las variables Weight
formula <- Weight ~ Hip.Girth + Chest.Girth
formula
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
plot(modelo_nuevo)
library(car)
# 4. Independencia de los residuos.
test_indep_residuos <- durbinWatsonTest(modelo_nuevo)
test_indep_residuos
# 5. Los residuos siguen una distribución normal.
# Como ya lo hemos hecho muchas veces anteriormente, para verificar la normalidad
# de los residuos utilizaremos la prueba de Shapiro.
rediduos_normales <- shapiro.test(modelo_nuevo)
# 5. Los residuos siguen una distribución normal.
# Como ya lo hemos hecho muchas veces anteriormente, para verificar la normalidad
# de los residuos utilizaremos la prueba de Shapiro.
rediduos_normales <- shapiro.test(modelo_nuevo$residuals)
# 5. Los residuos siguen una distribución normal.
# Como ya lo hemos hecho muchas veces anteriormente, para verificar la normalidad
# de los residuos utilizaremos la prueba de Shapiro.
residuos_normales <- shapiro.test(modelo_nuevo$residuals)
p_shapiro <- residuos_normales$p.value
p_shapiro
# 6. Homocedasticidad de los residuos.
# Para verificar la condicion se utilizará la prueba Breusch-Pagan-Godfrey,
# cuya hipótesis nula nos dice que las varianzas de los residuos son iguales.
test_homoced <- ncvTest(modelo_nuevo)
p_homoced <- test_homoced$p
p_homoced
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
test_indep_residuos
p_shapiro
p_homoced
source("G:/Mi unidad/1. Nivel 6-7/IME/ime-grupo-2-/ep13/equipo-2-respuesta.R", echo=TRUE)
modelo_nuevo
summary(modelo_nuevo)
print(1/vifs)
